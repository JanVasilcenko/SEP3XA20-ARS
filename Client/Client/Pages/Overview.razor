@page "/overview"
@using Client.Data;
@using Client.Model;
@inject IFlightInfoService flightInfoService
@inject IBookingService bookingService
@inject IPassengerService passengerService
@inject ITicketService ticketService

<div class="container">
    <div class="row p-3 ">
        @if (flightInfo == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <div class="col-12 col-md-6 offset-md-3 ">
                <h2 class="text-center border-bottom p-3">Flight overview</h2>
                <h3 class="my-3">Flights</h3>
                <h5>@flightInfo.departure.fromWhere - <strong>@flightInfo.arrival.fromWhere</strong></h5>
                <div class="row ml-0 mb-2 justify-content-between my-3">

                    <span>@flightInfo.departure.departureTime.ToString("dddd, dd MMMM yyyy")</span>
                    <span class="mx-2">@flightInfo.departure.departureTime.ToString("h: mm tt")</span>
                    <span>-</span>
                    <span class="mx-2">@flightInfo.arrival.arrivalTime.ToString("h: mm tt")</span>
                    <span>-</span>
                    <span class="mx-2">FR 1872</span>
                </div>
                <div class="row ml-2 justify-content-between">
                    @if (numOfAdults != 0 && numOfChildren == 0)
                    {
                        <span class="mr-5">@numOfAdults x Adult</span>
                    }
                    else
                    {
                        <span class="mr-5">@numOfAdults x Adult</span>
                        <span class="mr-5">@numOfChildren x Children</span>
                    }
                    <span> <strong>DKK 420,69</strong></span>
                </div>
                <div class="row py-2 ml-2 border-bottom">
                    <small class="ml-2">
                        @if (largeLuggage != "0x bag(Large)")
                        {
                            @largeLuggage
                            <br />
                        }
                        @if (mediumLuggage != "0x bag(Medium)")
                        {
                            @mediumLuggage
                            <br />
                        }
                        @if (smallLuggage != "0x bag(Small)")
                        {
                            @smallLuggage
                        }
                    </small>
                </div>
            </div>
        }

        @if (returning)
        {
            <div class="col-12 col-md-6 offset-md-3 my-3">

                <h5>Pakistan to <strong>Uzbekistan</strong></h5>

                <div class="row ml-0 mb-2 justify-content-between my-3">

                    <span>Sat 1 May</span>
                    <span class="mx-2">10:25</span>
                    <span>-</span>
                    <span class="mx-2">15:00</span>
                    <span>-</span>
                    <span class="mx-2">FR 1872</span>
                </div>
                <div class="row ml-2 justify-content-between">
                    @if (numOfAdults != 0 && numOfChildren == 0)
                    {
                        <span class="mr-5">@numOfAdults x Adult</span>
                    }
                    else
                    {
                        <span class="mr-5">@numOfAdults x Adult</span>
                        <span class="mr-5">@numOfChildren x Children</span>
                    }
                    <span> <strong>DKK 420,69</strong></span>
                </div>
                <div class="row ml-2 my-2 border-bottom">
                    <small class="ml-2">
                        @if (largeLuggage != "0x bag(Large)")
                        {
                            @largeLuggage
                        }
                        @if (mediumLuggage != "0x bag(Medium)")
                        {
                            @mediumLuggage
                        }
                        @if (smallLuggage != "0x bag(Small)")
                        {
                            @smallLuggage
                        }
                    </small>
                </div>

            </div>
        }

        <div class="col-12 col-md-6 offset-md-3 my-3">
            <div class="row ml-2">
                <div class="d-flex flex-column">
                    <h4>Passengers</h4>
                    <a @onclick="CollapseOn" style="color: #0062ff; cursor:pointer;">View details</a>
                </div>

                <div class="w-100" hidden="@collapse" id="collapseExample">
                    @if (passengers == null)
                    {
                        <p>Loading....</p>
                    }
                    else
                    {
                        @for (int i = 0; i < passengers.Count; i++)
                        {
                            <div class="card card-body d-flex flex-row justify-content-between w-100">
                                <p>@passengers[i].firstname</p>
                                <p>@passengers[i].lastname</p>
                                <p>@luggage[i] bag</p>
                                <p>Seat @seats[i]</p>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="col-12 col-md-6 offset-md-3 my-3 ">
            <div class="row justify-content-between ml-2" style=" border-top: 1px solid #dee2e6; padding-top: 20px;">
                <p>Total to pay</p>
                <h2>DKK @totalPrice</h2>
            </div>
            <div class="row justify-content-end">
                <button class="btn btn-primary btn-rounded" @onclick="BookFlight">Pay</button>
            </div>
        </div>
    </div>
</div>
@code {

    private FlightInfo flightInfo;
    private List<Ticket> luggage;
    private List<Passenger> passengers;
    private List<string> seats;
    private bool returning;
    private int numOfAdults;
    private int numOfChildren;
    private int totalPrice;
    private string smallLuggage;
    private string mediumLuggage;
    private string largeLuggage;
    private bool collapse = true;

    protected async override Task OnInitializedAsync()
    {
        flightInfo = await flightInfoService.getFlightInfo(bookingService.getFlightID());
        returning = bookingService.IsReturning();
        numOfAdults = bookingService.getAdults();
        numOfChildren = bookingService.getChildren();
        passengers = bookingService.getPassengers();
        luggage = bookingService.getLuggage();
        seats = bookingService.getSeatInfo();
        CalculateTotal(luggage);
        CalculateLuggage(luggage);
    }

    private void CalculateTotal(List<Ticket> tickets)
    {
        foreach (Ticket t in tickets)
        {
            totalPrice += t.price;
        }
        totalPrice += bookingService.getPrice();
    }

    private void CalculateLuggage(List<Ticket> tickets)
    {
        int ll = 0;
        int ml = 0;
        int sl = 0;

        foreach (Ticket t in tickets)
        {
            Console.WriteLine(t.luggage);
            if (t.luggage.Equals("Small"))
            {
                sl++;
            }
            if (t.luggage.Equals("Medium"))
            {
                ml++;
            }
            if (t.luggage.Equals("Large"))
            {
                ll++;
            }

            largeLuggage = ll + "x bag(Large)";
            mediumLuggage = ml + "x bag(Medium)";
            smallLuggage = sl + "x bag(Small)";
        }
    }

    private void CollapseOn()
    {
        collapse = false;
    }

    private async Task BookFlight()
    {
        //Register passenger
        foreach (Passenger p in passengers)
        {
            await passengerService.registerPassenger(p, bookingService.getUsername());
        }

        //Check each seat availability

        //if okay reserve else error
        List<string> availability = new List<string>();
        for (int i = 0; i < seats.Count; i++)
        {
            availability.Add(await ticketService.CheckAvailability(GetSeatNumber(seats[i]), flightInfo.flight.id));
        }
        foreach (string s in availability)
        {
            Console.WriteLine(s);
        }
        //Create ticket and reserve seat
        if (availability.Contains("false"))
        {
            //Error
            Console.WriteLine("error catched");
        }
        else
        {
            Console.WriteLine("Sending request for booking");
            for (int i = 0; i < passengers.Count; i++)
            {
                await ticketService.BookAFlight(passengers[i].passportNumber, flightInfo.flight.id, GetSeatNumber(seats[i]), luggage[i]);
            }
        }

    }
    private int GetSeatNumber(string seat)
    {
        if (seat.Length == 2)
        {
            int mid = seat.Length / 2;
            String[] parts = { seat.Substring(0, mid), seat.Substring(mid) };
            int number = Convert.ToInt32(parts[0]);
            string character = parts[1];
            return CalculateByNumberAndString(number, character);
        }
        else
        {
            String[] parts = { seat.Substring(0, 2), seat.Substring(2) };
            int number = Convert.ToInt32(parts[0]);
            string character = parts[1];
            return CalculateByNumberAndString(number, character);
        }
    }
    private int CalculateByNumberAndString(int number, string character)
    {
        int sum = number * 6;
        switch (character)
        {
            case "A":
                sum -= 5;
                break;
            case "B":
                sum -= 4;
                break;
            case "C":
                sum -= 3;
                break;
            case "D":
                sum -= 2;
                break;
            case "E":
                sum -= 1;
                break;
            case "F":
                break;
        }
        return sum;
    }
}
