@page "/searchflight"
@using Blazored.Typeahead
@using Client.Model
@using Client.Data
@inject IAirportService airportService
@inject NavigationManager NavigationManager
<input type="radio" id="one-way" name="flight-type" @onclick="@Hide" checked>
<input type="radio" id="round" name="flight-type" @onclick="@Show">
<BlazoredTypeahead SearchMethod="searchAirport" @bind-Value="destination">
    <SelectedTemplate>@context.IATACode</SelectedTemplate>
    <ResultTemplate>@context.airportName</ResultTemplate>
</BlazoredTypeahead>
<BlazoredTypeahead SearchMethod="searchAirport" @bind-Value="origin">
    <SelectedTemplate>@context.IATACode</SelectedTemplate>
    <ResultTemplate>@context.airportName</ResultTemplate>
</BlazoredTypeahead>
<input class="form-control" @bind:format="yyyy-MM-dd" type="date" @bind="wishedDeparture.departureTime" @bind:event="oninput" required>
@if (!show)
{
    <input class="form-control" @bind:format="yyyy-MM-dd" type="date" @bind="wishedDepartureBack.departureTime" @bind:event="oninput">
}
<input type="number" class="form-control" @bind-value="numberOfAdults" />
<input type="number" class="form-control" @bind-value="numberOfChildren" />
<button @onclick="SearchForFlights">button</button>
@code {
    private bool show = true;
    private IList<Airport> airports;
    private Airport origin;
    private Airport destination;
    private Departure wishedDepartureBack = new Departure();
    private Departure wishedDeparture = new Departure();
    private int numberOfAdults;
    private int numberOfChildren;

    protected async override Task OnInitializedAsync()
    {
        airports = await airportService.getAirports();
        wishedDepartureBack.departureTime = DateTime.Now;
        wishedDeparture.departureTime = DateTime.Now;
    }

    private void SearchForFlights()
    {
        //NavigationManager.NavigateTo("/flightlist");
        if (show)
        {
            NavigationManager.NavigateTo("/flightresult?origin=" + origin.IATACode + "&destination=" + destination.IATACode + "&wishedDeparture=" + wishedDeparture.departureTime.Date + "&adults=" + numberOfAdults + "&children=" + numberOfChildren);
        }
        else
        {
            NavigationManager.NavigateTo("/flightresult?origin=" + origin.IATACode + "&destination=" + destination.IATACode + "&wishedDeparture=" + wishedDeparture.departureTime.Date + "&adults=" + numberOfAdults + "&children=" + numberOfChildren + "&wisheddepartureback=" + wishedDepartureBack.departureTime.Date);
        }
    }

    private async Task<IEnumerable<Airport>> searchAirport(string searchText)
    {
        return await Task.FromResult(airports.Where(x => x.airportName.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private void Show()
    {
        show = false;
    }

    private void Hide()
    {
        show = true;
    }
}
