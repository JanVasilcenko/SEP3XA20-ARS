@page "/pickedflight"
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@;
@inject NavigationManager navigationManager
@inject IFlightInfoService flightInfoService
@inject IAirportService airportService
@inject IBookingService bookingService
@inject ITicketService ticketService
@namespace AddPassengerService
@using Client.Data
@using Client.Model

<div class="container-fluid">
    <div class="row d-flex justify-content-center align-items-center flex-column flight-overview">
        <div class="flex-row d-flex">

            @if (from == null)
            {
                <h2 class="text-white pr-5">
                    Loading...
                </h2>

            }
            else
            {
                <h2 class="text-white pr-5">
                    @{string a = from.city + " " + from.country;}
                    @a
                </h2>
            }

            @if (whereTo == null)
            {
                <h2 class="text-white">
                    Loading...
                </h2>
            }
            else
            {
                <h2 class="text-white">
                    @{string a = whereTo.city + " " + whereTo.country;}
                    @a
                </h2>
            }

        </div>

        <ul>
            @if (numOfAdults == 1)
            {
                <li>1 Adult</li>
            }
            else
            {
                <li>@numOfAdults Adult</li>
            }
            @if (numOfChildren == 1)
            {
                <li>1 Child</li>
            }
            else if (numOfChildren == 0)
            {

            }
            else
            {
                <li>@numOfChildren Children</li>
            }

        </ul>

    </div>
</div>

@for (int i = 0; i < (numOfAdults + numOfChildren); i++)
{
    <AddPassenger @bind-newPassenger="passengers[i]" />
} 
<button @onclick="Submit">Add Passengers</button>

@code {
    private int flightID;
    private int numOfAdults;
    private int numOfChildren;
    private int price;
    private FlightInfo flightInfo;
    private Airport from;
    private Airport whereTo;
    private List<Passenger> passengers = new List<Passenger>();
    private bool isReturning;


    protected async override Task OnInitializedAsync()
    {
        @for (int i = 0; i < 11; i++)
        {
            passengers.Add(new Passenger(0, DateTime.Now, null, null, DateTime.Now, "A", null));
        }

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("flightID", out var flightid))
        {
            flightID = Convert.ToInt32(flightid.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("adults", out var adults))
        {
            numOfAdults = Convert.ToInt32(adults.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("children", out var children))
        {
            numOfChildren = Convert.ToInt32(children.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("price", out var priceparam))
        {
            price = Convert.ToInt32(priceparam.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returning", out var returning))
        {
            isReturning = Convert.ToBoolean(returning.First());
        }

        flightInfo = await flightInfoService.getFlightInfo(flightID);
        from = await airportService.getAirportByIATA(flightInfo.departure.fromWhere);
        whereTo = await airportService.getAirportByIATA(flightInfo.arrival.fromWhere);
        bookingService.setFlightID(flightID);
        bookingService.setAlreadyReservedSeats(await ticketService.getTickets(flightID));
    }
    private void Submit()
    {
        SaveInformation();
    }

    private void SaveInformation()
    {
        int startErasing = 0;
        for (int i = 0; i < 11; i++)
        {
            if (passengers[i].gender.Equals("A"))
            {
                startErasing = i;
                break;
            }
        }
        passengers.RemoveRange(startErasing-1, 11-(startErasing-1));
        foreach (Passenger p in passengers)
        {
            Console.WriteLine(p);
        }
        bookingService.SavePassengerData(passengers,price);
        bookingService.setReturn(isReturning);
        bookingService.setAdultsChildren(numOfAdults, numOfChildren);
        navigationManager.NavigateTo("/luggage");
    }
}
